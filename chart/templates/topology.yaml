---
apiVersion: mission-control.flanksource.com/v1
kind: Connection
metadata:
  name: mission-control
  namespace: {{ .Release.Namespace}}
spec:
  type: postgres
  url:
    value: $(username)
  username:
    valueFrom:
      secretKeyRef:
        name: incident-commander-postgres
        key: DB_URL
---
apiVersion: canaries.flanksource.com/v1
kind: Topology
metadata:
  name: t-{{ .Values.tenantSlug }}
  namespace: {{ .Release.Namespace}}
spec:
  icon: mission-control
  schedule: '@every 10m'
  type: Topology
  properties:
  - name: URL
    type: url
    configLookup:
      config:
        name: mission-control-{{ .Release.Namespace}}
        type: Kubernetes::Ingress
      display:
        javascript: config.spec.rules[0].host
  - name: Users
    lookup:
      postgres:
      - connection: connection://{{.Release.Namespace}}/mission-control
        query: SELECT COUNT(*) FROM people WHERE name != 'System' 
        display:
          expr: results.rows[0].count
  - name: Error Rate
    lookup:
      prometheus:
      - query: '100 * sum by (namespace) (increase(echo_requests_total{code=~"5..",namespace="{{.Release.Namespace}}"}[24h])) / sum by (namespace) (increase(echo_requests_total{namespace="{{.Release.Namespace}}"}[24h]))'
        display:
          expr: |
            [{'name': 'Error Rate', 'value': int(results[0].value), 'headline': true}].toJSON()
  - name: CPU
    lookup:
      prometheus:
      - query: '1000 * max(rate(container_cpu_usage_seconds_total{container!="",namespace="{{.Release.Namespace}}"}[5m]))'
        display:
          expr: |
            [{'name': 'CPU', 'value': int(results[0].value), 'headline': true, 'unit': 'millicores'}].toJSON()
  - name: Memory
    lookup:
      prometheus:
      - query: 'max(avg_over_time(container_memory_working_set_bytes{container!="",namespace="{{.Release.Namespace}}"}[5m]))'
        display:
          expr: |
            [{'name': 'Memory', 'value': int(results[0].value), 'headline': true, 'unit': 'bytes'}].toJSON()
  - name: Org ID
    text: {{ .Values.missionControl.clerkOrgID }}
  - name: Last Login
    lookup:
      postgres:
      - connection: connection://{{.Release.Namespace}}/mission-control
        query: SELECT MAX(last_login) FROM people
        display:
          expr: results.rows[0].max
  - name: Namespace
    text: {{ .Release.Namespace }}

  components:
  - components:
    - icon: group
      lookup:
        postgres:
        - connection: connection://{{.Release.Namespace}}/mission-control
          display:
            javascript: |
              JSON.stringify(results.rows.map(function(r) {return {name: r.name}}))
          name: Team names query
          query: SELECT name FROM teams
      name: Teams
      type: lookup
    icon: incidents
    name: Incident Commander
    checks:
    - inline:
        http:
        - endpoint: http://mission-control-x-default-x-{{ .Release.Namespace}}.{{ .Release.Namespace}}:8080/health
          name: incident-commander-{{ .Release.Namespace}}
          responseCodes:
          - 200
        schedule: '@every 5m'
    properties:
    - headline: true
      lookup:
        postgres:
        - connection: connection://{{.Release.Namespace}}/mission-control
          display:
            expr: results.rows[0].count
          name: Incident count query
          query: SELECT count(*) FROM incidents WHERE (resolved IS NULL) OR (closed IS NULL)
      name: Incidents
    - name: Docs
      text: https://docs.flanksource.com
      type: url
    - configLookup:
        config:
          tags:
            app.kubernetes.io/name: mission-control
          type: Kubernetes::Pod
          namespace: {{ .Release.Namespace}}
        display:
          javascript: |
            config.spec.containers[0]['image'].split(':')[1]
      headline: true
      name: Version
    selectors:
    - labelSelector: app.kubernetes.io/name=mission-control
      namespace: {{.Release.Namespace}}
    type: API
  - checks:
    - inline:
        http:
        - endpoint: http://canary-checker-x-default-x-{{ .Release.Namespace}}.{{ .Release.Namespace}}:8080/health
          name: canary-checker-{{ .Release.Namespace}}
          responseCodes:
          - 200
        schedule: '@every 5m'
    components:
    - forEach:
        properties:
        - name: Type
          text: Topology
      icon: k8s-customresourcedefinition
      lookup:
        postgres:
        - connection: connection://{{.Release.Namespace}}/mission-control
          display:
            javascript: |
              JSON.stringify(results.rows.map(function(r) {return {
                name: r.name,
                properties: [
                {
                  name: 'Last runtime',
                  text: r.time_end,
                },
                {
                  name: 'Duration',
                  text: r.duration_millis,
                  unit: 'ms',
                  headline: true,
                },
                {
                  name: 'Success Count',
                  text: r.success_count,
                  headline: true,
                },
                {
                  name: 'Error Count',
                  text: r.error_count,
                  headline: true,
                },
              ],
              }}))
          name: Topologies count query
          query: |
            SELECT * FROM (
              SELECT
                ROW_NUMBER() OVER (PARTITION BY t.name ORDER BY time_end DESC) AS rn, t.name, jh.status, jh.success_count,
                jh.error_count, jh.duration_millis, jh.time_end
              FROM topologies t
              INNER JOIN job_history jh ON t.id::text = jh.resource_id) AS s WHERE rn = 1
      name: Topologies
      type: lookup
    icon: heart
    name: Canary Checker
    properties:
    - headline: true
      lookup:
        postgres:
        - connection: connection://{{.Release.Namespace}}/mission-control
          display:
            expr: results.rows[0].count
          name: Component count query
          query: SELECT count(*) FROM components WHERE deleted_at IS NULL
      name: Components
    - name: Checks
      headline: true
      lookup:
        postgres:
        - connection: connection://{{.Release.Namespace}}/mission-control
          display:
            expr: results.rows[0].count
          query: SELECT COUNT(*) FROM checks WHERE deleted_at IS NULL
    - name: Canaries
      headline: true
      lookup:
        postgres:
        - connection: connection://{{.Release.Namespace}}/mission-control
          display:
            expr: results.rows[0].count
          query: SELECT COUNT(*) FROM canaries WHERE deleted_at IS NULL
    - name: Check Executions / Hour
      lookup:
        postgres:
        - connection: connection://{{.Release.Namespace}}/mission-control
          display:
            expr: results.rows[0].count
          query: SELECT ROUND(COUNT(*)/(30*24.0), 2) AS count FROM check_statuses WHERE (NOW() - created_at) < INTERVAL '30 days'
    - name: Check Executions / Day
      lookup:
        postgres:
        - connection: connection://{{.Release.Namespace}}/mission-control
          query: SELECT ROUND(COUNT(*)/(30.0), 2) AS count FROM check_statuses WHERE (NOW() - created_at) < INTERVAL '30 days'
          display:
            expr: results.rows[0].count

    - name: Docs
      text: https://docs.flanksource.com/canary-checker/overview
      type: url
    - configLookup:
        config:
          tags:
            app.kubernetes.io/name: canary-checker
          type: Kubernetes::Pod
          namespace: {{ .Release.Namespace}}
        display:
          javascript: |
            config.spec.containers[0]['image'].split(':')[1]
      headline: true
      name: Version
    selectors:
    - labelSelector: app.kubernetes.io/name=canary-checker
      namespace: {{.Release.Namespace}}
    type: API

  - icon: logs
    name: APM Hub
    properties:
    - headline: true
      lookup:
        postgres:
        - connection: connection://{{.Release.Namespace}}/mission-control
          display:
            javascript: results.rows[0].count
          name: Backends count query
          query: SELECT count(*) FROM logging_backends WHERE deleted_at IS NULL
      name: Backends
    - configLookup:
        config:
          tags:
            app.kubernetes.io/name: apm-hub
          type: Kubernetes::Pod
          namespace: {{ .Release.Namespace}}
        display:
          javascript: |
            config.spec.containers[0]['image'].split(':')[1]
      headline: true
      name: Version
    - name: Docs
      text: https://docs.flanksource.com/apm-hub/overview
      type: url
    selectors:
    - labelSelector: app.kubernetes.io/name=apm-hub
      namespace: {{.Release.Namespace}}
    type: API

  # Config DB
  - checks:
    - inline:
        http:
        - endpoint: http://config-db-x-default-x-{{ .Release.Namespace}}.{{ .Release.Namespace}}:8080/live
          name: config-db-{{ .Release.Namespace}}
          responseCodes:
          - 200
        schedule: '@every 5m'
    components:
    - icon: k8s-customresourcedefinition
      lookup:
        postgres:
        - connection: connection://{{.Release.Namespace}}/mission-control
          display:
            javascript: |
              JSON.stringify(results.rows.map(function(r) {return {
                name: r.name,
                properties: [
                {
                  name: 'Last runtime',
                  text: r.time_end,
                },
                {
                  name: 'Duration',
                  text: r.duration_millis,
                  unit: 'ms',
                  headline: true,
                },
                {
                  name: 'Success Count',
                  text: r.success_count,
                  headline: true,
                },
                {
                  name: 'Error Count',
                  text: r.error_count,
                  headline: true,
                },
              ],
              }}))
          name: Config scrapers count query
          query: |
            SELECT * FROM (
              SELECT
                ROW_NUMBER() OVER (PARTITION BY c.name ORDER BY time_end DESC) AS rn, c.name, jh.status, jh.success_count,
                jh.error_count, jh.duration_millis, jh.time_end
              FROM config_scrapers c
              INNER JOIN job_history jh ON c.id::text = jh.resource_id) AS s WHERE rn = 1
      name: ConfigScrapers
      type: lookup
    icon: config
    name: Config DB
    properties:
    - headline: true
      lookup:
        postgres:
        - connection: connection://{{.Release.Namespace}}/mission-control
          display:
            expr: results.rows[0].count
          name: Config Items count query
          query: SELECT count(*) FROM config_items WHERE deleted_at IS NULL
      name: Config Items
    - configLookup:
        config:
          tags:
            app.kubernetes.io/name: config-db
          type: Kubernetes::Pod
          namespace: {{ .Release.Namespace}}
        display:
          javascript: |
            config.spec.containers[0]['image'].split(':')[1]
      headline: true
      name: Version
    - name: Docs
      text: https://docs.flanksource.com/config-db/overview
      type: url
    selectors:
    - labelSelector: app.kubernetes.io/name=config-db
      namespace: {{.Release.Namespace}}
    type: API

  # PostgreSQL
  - name: PostgreSQL
    icon: postgres
    properties:
    - lookup:
        postgres:
        - connection: connection://{{.Release.Namespace}}/mission-control
          display:
            expr: results.rows[0].version
          name: Version query
          query: SELECT VERSION()
      name: Version
    - headline: true
      lookup:
        postgres:
        - connection: connection://{{.Release.Namespace}}/mission-control
          display:
            expr: results.rows[0].pg_size_pretty
          name: Size query
          query: SELECT pg_size_pretty(pg_database_size('{{ lower .Values.missionControl.clerkOrgID }}'))
      name: Size
    - headline: true
      lookup:
        postgres:
        - connection: connection://{{.Release.Namespace}}/mission-control
          display:
            expr: results.rows[0].sum
          name: Active connections query
          query: SELECT sum(numbackends) FROM pg_stat_database WHERE datname = '{{ lower .Values.missionControl.clerkOrgID }}'
      name: Connections
    type: Database

  # Jobs
  - name: Jobs
    type: Jobs
    icon: clock
    components:
    - name: JobGroups
      lookup:
        postgres:
        - connection: connection://{{.Release.Namespace}}/mission-control
          query: |
            WITH ordered_history AS (
              SELECT
                job_history.*,
                ROW_NUMBER() OVER (PARTITION by name, resource_type, resource_id ORDER BY created_at DESC) AS rn
              FROM job_history
              WHERE status NOT IN ('RUNNING', 'SKIPPED')
            )
            SELECT * from ordered_history where rn = 1 and resource_id = '';
          display:
            expr: |
              results.rows.map(r, {
                'name': r.name,
                'icon': 'clock',
                'type': 'JobHistory',
                'status': r.status in ['SUCCESS', 'FINISHED'] ? 'healthy': 'unhealthy',
                'status_reason': r.status in ['SUCCESS', 'FINISHED'] ? '': r.details.toJSON(),
                'properties': [
                  {'name': 'success_count', 'value': r.success_count, 'headline': true},
                  {'name': 'error_count', 'value': r.error_count, 'headline': true},
                  {'name': 'duration_ms', 'value': r.duration_millis},
                  {'name': 'last_run', 'text': string(r.time_end)},
                  {'name': 'count'},
                  {'name': 'rate/hr'},
                  {'name': 'pass rate'},
                ],
              }).toJSON()

      properties:
        - name: count
          lookup:
            prometheus:
            - query: 'count by (name) (job{namespace="{{ .Release.Namespace}}"})'
              url: {{ .Values.prometheusURL | quote }}
              display:
                expr: |
                  dyn(results).map(r, {
                    'name': r.name,
                    'properties': [{'name': 'count', 'value': int(r.value)}]
                  }).toJSON()
        - name: rate
          lookup:
            prometheus:
            - query: 'sum(increase(job{namespace="{{ .Release.Namespace}}"}[1h])) by (name)'
              url: {{ .Values.prometheusURL | quote }}
              display:
                expr: |
                  dyn(results).map(r, {
                    'name': r.name,
                    'properties': [{'name': 'rate/hr', 'value': math.Ceil(int(r.value))}]
                  }).toJSON()

        - name: pass-rate
          lookup:
            prometheus:
            - query: '100 * sum by (name) (count_over_time(job{namespace="{{ .Release.Namespace}}",status=~"FINISHED|SUCCESS"}[1h])) / sum by (name) (count_over_time(job{namespace="{{ .Release.Namespace}}"}[1h]))'
              url: {{ .Values.prometheusURL | quote }}
              display:
                expr: |
                  dyn(results).map(r, {
                    'name': r.name,
                    'properties': [{'name': 'pass rate', 'value': int(r.value)}]
                  }).toJSON()

  # Event Queue
  - name: Event Queue
    icon: switch
    properties:
    - name: Backlog
      lookup:
        postgres:
        - query: SELECT count(*) FROM event_queue
          connection: connection://{{.Release.Namespace}}/mission-control
          display:
            expr: results.rows[0].count
          test:
            expr: results.rows[0].count < 200
    checks:
    - inline:
        postgres:
        - query: SELECT distinct(name), count(*) FROM event_queue GROUP BY name
          connection: connection://{{.Release.Namespace}}/mission-control
          name: Event Queue Checks
          transformDeleteStrategy: MarkHealthy
          transform:
            expr: |
              results.rows.map(r, {
                'name': r.name,
                'icon': 'switch',
                'message': string(r.count) + ' items in queue',
                'pass': r.count < 200,
              }).toJSON()
